imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: aws_ses_monitor.yml }

framework:
    #esi:             ~
    #translator:      { fallback: %locale% }
    secret:          '%secret%'
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: '%kernel.debug%'
    form:            true
    csrf_protection: true
    validation:      { enable_annotations: true }
    templating:      { engines: ['twig'] } #assets_version: SomeVersionScheme
    default_locale:  "%locale%"
    trusted_proxies: ~
    session:         ~
    #router_proxy:   { path: /_proxy }

# Twig Configuration
twig:
    debug:            '%kernel.debug%'
    strict_variables: '%kernel.debug%'
    globals:
        stripe_publishable_key: '%stripe_publishable_key%'

# Assetic Configuration
assetic:
    debug:          '%kernel.debug%'
    use_controller: false   
    #bundles:        [ ]
    #java: /usr/bin/java
    filters:
        lessphp:
            file: '%kernel.root_dir%/../vendor/oyejorge/less.php/lessc.inc.php'
            apply_to: '\.less$'
        cssrewrite: ~
        #closure:
        #    jar: %kernel.root_dir%/Resources/java/compiler.jar
        #yui_css:
        #    jar: %kernel.root_dir%/Resources/java/yuicompressor-2.4.7.jar

# Doctrine Configuration
doctrine:
    dbal:
        driver:   '%database_driver%'
        host:     '%database_host%'
        port:     '%database_port%'
        dbname:   '%database_name%'
        user:     '%database_user%'
        password: '%database_password%'
        charset:  utf8mb4
        server_version: '5.6'
        types:
            uuid: Ramsey\Uuid\Doctrine\UuidType

    orm:
        auto_generate_proxy_classes: '%kernel.debug%'
        entity_managers:
            default:
                auto_mapping: true
                filters:
                    softdeleteable:
                        class: Gedmo\SoftDeleteable\Filter\SoftDeleteableFilter
                        enabled: true
                dql:
                    string_functions:
                        GROUP_CONCAT: Civix\CoreBundle\Doctrine\Query\Functions\GroupConcat
                mappings:
                    AwsSesMonitorBundle:
                        mapping: true
                        type: xml
                        dir: '%kernel.root_dir%/../app/Resources/config/AwsSesMonitorBundle/doctrine/mappings'
                        alias: 'AwsSesMonitorBundle'
                        prefix: 'SerendipityHQ\Bundle\AwsSesMonitorBundle\Model'
                    Notification:
                        mapping: true
                        type: annotation
                        dir: '%kernel.root_dir%/../src/Civix/Component/Notification/Model'
                        alias: 'Notification'
                        prefix: 'Civix\Component\Notification\Model'
                        is_bundle: false
        resolve_target_entities:
            Civix\CoreBundle\Entity\Stripe\AccountInterface: \Civix\CoreBundle\Entity\Stripe\Account
            Civix\CoreBundle\Entity\Stripe\CustomerInterface: \Civix\CoreBundle\Entity\Stripe\Customer
            Civix\Component\Notification\Model\RecipientInterface: \Civix\CoreBundle\Entity\User

# Swiftmailer Configuration
swiftmailer:
    transport: '%mailer_transport%'
    host:      '%mailer_host%'
    username:  '%mailer_user%'
    password:  '%mailer_password%'
    encryption: 'tls'
    spool:     { type: memory }
    
    
mopa_bootstrap:
    menu: ~
    form: ~
    
knp_paginator:
    page_range: 5                      # default page range used in pagination control
    default_options:
        page_name: page                # page query parameter name
        sort_field_name: x-sort          # sort field query parameter name
        sort_direction_name: x-direction # sort direction query parameter name
        distinct: true                 # ensure distinct results, useful when ORM queries are using GROUP BY statements
    template:
        pagination: MopaBootstrapBundle:Pagination:sliding.html.twig     # sliding pagination controls template
        sortable: KnpPaginatorBundle:Pagination:sortable_link.html.twig # sort link template

ewz_recaptcha:
    public_key:   '%recaptcha_public_key%'
    private_key:  '%recaptcha_private_key%'
    locale_key:   '%recaptcha_locale_key%'
    enabled:      '%recaptcha_enabled%'

knp_gaufrette:
    stream_wrapper: ~
    adapters:
        avatar_image_adapter:
            aws_s3:
               service_id: 'aws.s3'
               bucket_name: '%amazon_s3.bucket%'
               options:
                   directory: 'avatars'
        avatar_group_adapter:
            aws_s3:
                service_id: 'aws.s3'
                bucket_name: '%amazon_s3.bucket%'
                options:
                    directory: 'avatars/src'
        banner_group_adapter:
            aws_s3:
                service_id: 'aws.s3'
                bucket_name: '%amazon_s3.bucket%'
                options:
                    directory: 'group/banner'
        avatar_representative_adapter:
            aws_s3:
                service_id: 'aws.s3'
                bucket_name: '%amazon_s3.bucket%'
                options:
                    directory: 'avatars/representatives'
        educational_image_adapter:
            aws_s3:
                service_id: 'aws.s3'
                bucket_name: '%amazon_s3.bucket%'
                options:
                    directory: 'educational'
        blog_post_adapter:
            aws_s3:
                service_id: 'aws.s3'
                bucket_name: '%amazon_s3.bucket%'
                options:
                    directory: 'posts'
        image_announcement_adapter:
            aws_s3:
                service_id: 'aws.s3'
                bucket_name: '%amazon_s3.bucket%'
                options:
                    directory: 'announcement'
        image_post_adapter:
            aws_s3:
                service_id: 'aws.s3'
                bucket_name: '%amazon_s3.bucket%'
                options:
                    directory: 'post'
        image_petition_adapter:
            aws_s3:
                service_id: 'aws.s3'
                bucket_name: '%amazon_s3.bucket%'
                options:
                    directory: 'petition'
        thumbnail_post_adapter:
            aws_s3:
                service_id: 'aws.s3'
                bucket_name: '%amazon_s3.bucket%'
                options:
                    directory: 'thumbnail/post'
        thumbnail_petition_adapter:
            aws_s3:
                service_id: 'aws.s3'
                bucket_name: '%amazon_s3.bucket%'
                options:
                    directory: 'thumbnail/petition'
    filesystems:
        avatar_image_fs:
            adapter: avatar_image_adapter
        avatar_group_fs:
            adapter: avatar_group_adapter
        banner_group_fs:
            adapter: banner_group_adapter
        avatar_representative_fs:
            adapter: avatar_representative_adapter
        educational_image_fs:
            adapter: educational_image_adapter
        blog_post_fs:
            adapter: blog_post_adapter
        image_announcement_fs:
            adapter: image_announcement_adapter
        image_post_fs:
            adapter: image_post_adapter
        image_petition_fs:
            adapter: image_petition_adapter
        thumbnail_post_fs:
            adapter: thumbnail_post_adapter
        thumbnail_petition_fs:
            adapter: thumbnail_petition_adapter

vich_uploader:
    db_driver: orm
    storage: gaufrette
    mappings:
        avatar_image:
            uri_prefix: /avatars
            upload_destination: avatar_image_fs
            namer: vich_uploader.namer_uniqid
            inject_on_load: true
        avatar_group:
            uri_prefix: /avatars/src
            upload_destination: avatar_group_fs
            namer: vich_uploader.namer_uniqid
            inject_on_load: true
        banner_group:
            uri_prefix: /group/banner
            upload_destination: banner_group_fs
            namer: vich_uploader.namer_uniqid
        avatar_representative:
            uri_prefix: /avatars/representatives
            upload_destination: avatar_representative_fs
            namer: vich_uploader.namer_uniqid
            inject_on_load: true
        educational_image:
            uri_prefix: /educational
            delete_on_update: true
            delete_on_remove: true
            upload_destination: educational_image_fs
            namer: vich_uploader.namer_uniqid
            inject_on_load: true
        post_image:
            uri_prefix: /posts
            delete_on_update: true
            delete_on_remove: true
            upload_destination: blog_post_fs
            namer: vich_uploader.namer_uniqid
            inject_on_load: true
        image_announcement:
            uri_prefix: /announcement
            upload_destination: image_announcement_fs
            namer: vich_uploader.namer_uniqid
        image_post:
            uri_prefix: /post
            upload_destination: image_post_fs
            namer: vich_uploader.namer_uniqid
        image_petition:
            uri_prefix: /petition
            upload_destination: image_petition_fs
            namer: vich_uploader.namer_uniqid
        thumbnail_post:
            uri_prefix: /thumbnail/post
            upload_destination: thumbnail_post_fs
            namer:
                service: civix_core.property_namer
                options:
                    property: facebookThumbnail.name
                    transliterate: false
        thumbnail_petition:
            uri_prefix: /thumbnail/petition
            upload_destination: thumbnail_petition_fs
            namer:
                service: civix_core.property_namer
                options:
                    property: facebookThumbnail.name

old_sound_rabbit_mq:
    connections: '%rabbitmq_connections%'
    
    # define producers
    producers:
        push_queue:
            connection:         default
            exchange_options:   {name: 'push-queue', type: direct}
        push:
            connection:         default
            exchange_options:   {name: 'push-sender', type: direct}
        async_event:
            connection:         default
            exchange_options:   {name: 'async-event', type: direct}
            enable_logger:      '%kernel.debug%'

    # define consumers
    consumers:
        push_queue:
            connection:         default
            exchange_options:   {name: 'push-queue', type: direct }
            queue_options:      {name: 'push-queue'}
            callback:           civix_core.rabbit.push_queue
            idle_timeout:           60
            idle_timeout_exit_code: 0
        async_event:
            connection:         default
            exchange_options:   {name: 'async-event', type: direct}
            queue_options:      {name: 'async-event'}
            callback:           civix_core.rabbit.async_event_consumer
            idle_timeout:           60
            idle_timeout_exit_code: 0
            enable_logger:      '%kernel.debug%'

stof_doctrine_extensions:
    default_locale: en_US
    orm:
        default:
            timestampable: true
            softdeleteable: true

civix_core:
    mailgun_client: mailgun.basic_client
    mailgun_public_client: mailgun.public_basic_client

fos_rest:
    serializer:
        serialize_null: true
    service:
        view_handler: civix_api.view_handler
    param_fetcher_listener: true
    body_listener: true
    access_denied_listener:
        json: true
    format_listener:
        rules:
            -
                path: ^/api
                priorities: [ json, csv ]
                fallback_format: json
            - { path: '^/', priorities: [ 'html', '*/*'], fallback_format: html, prefer_extension: True }
    exception:
        enabled: true
        codes:
            Symfony\Component\Security\Core\Exception\AccessDeniedException: 403
            Stripe\Error\Card: 400
            Stripe\Error\InvalidRequest: 400
        messages:
            Stripe\Error\Card: true
            Stripe\Error\InvalidRequest: true
    view:
        view_response_listener: 'force'
        formats:
            json: true
            csv: true
        failed_validation: HTTP_BAD_REQUEST
        empty_content: 204
        mime_types:
            csv: [ 'text/csv' ]

jms_serializer:
    metadata:
        directories:
            CivixComponent:
                namespace_prefix: Civix\Component
                path: '%kernel.root_dir%/config/serializer/CivixComponent'
            KnpPaginatorBundle:
                namespace_prefix: Knp\Bundle\PaginatorBundle
                path: '%kernel.root_dir%/config/serializer/KnpPaginatorBundle'
            KnpPager:
                namespace_prefix: Knp\Component\Pager
                path: '%kernel.root_dir%/config/serializer/KnpPager'

hwi_oauth:
    firewall_names: [mobileuser_security_area]
    resource_owners:
        facebook:
            type:                facebook
            client_id:           '%facebook_client_id%'
            client_secret:       '%facebook_client_secret%'
            infos_url:           'https://graph.facebook.com/me?fields=first_name,last_name,name,email,picture.type(large)'
            paths:
                profilepicture: 'picture.data.url'

monolog:
    channels: ['push']

nelmio_api_doc:
    name: Civix API documentation
    motd:
        template: CivixApiBundle::motd.html.twig
    sandbox:
        request_format:
            method: accept_header

bazinga_geocoder:
    providers:
        google_maps:
            api_key: '%google_api_key%'
            use_ssl: true

aws:
    version: latest
    region: "%amazon_s3.region%"
    credentials:
        key: "%amazon_s3.key%"
        secret: "%amazon_s3.secret%"
    S3:
        version: "2006-03-01"
    Sqs:
        version: "2012-11-05"
    Sns:
        version: "2010-03-31"

jms_di_extra:
    doctrine_integration: false
